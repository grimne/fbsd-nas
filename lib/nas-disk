#!/bin/sh

# ToDo (maybe): Add recommended/automatic tasks to apply to disk which wipes, partition and labels partition #1 with serial number


# Constants for base 10 and base 2 units
: ${kB:=$((1000))}      ${kiB:=$((1024))};       readonly kB kiB
: ${MB:=$((1000 * kB))} ${MiB:=$((1024 * kiB))}; readonly MB MiB
: ${GB:=$((1000 * MB))} ${GiB:=$((1024 * MiB))}; readonly GB GiB
: ${TB:=$((1000 * GB))} ${TiB:=$((1024 * GiB))}; readonly TB TiB


disk::list(){
# ToDo: add --short option for "nas disk list". Its just overwhelming
    geom disk list
}


disk::wipe::target(){
    local _target
    _target=$1
    printf "Wiping $_target"
    # Dont print the error message gpart gives if no partition is present
    gpart destroy -F $_target > /dev/null 2>&1
    printf "."
    dd if=/dev/zero of=${_target} bs=1m count=2 > /dev/null 2>&1
    printf "."
    _size=$(diskinfo ${_target} | cut -f 3)
    dd if=/dev/zero of=${_target} bs=1m oseek=$((_size / MiB - 2)) > /dev/null 2>&1
    printf "."
    # Wipe out the partition table by doing an additional iterate of create/destroy
    gpart create -s gpt $_target > /dev/null 2>&1
    printf "."
    gpart destroy -F $_target
}


disk::wipe(){
    disk::wipe::usage() {
        echo "Usage: $0 disk wipe /dev/diskN1 [/dev/diskN2 /dev/diskN3...]" 1>&2
        exit 1 
    }

    while getopts "h" opt
    do
        case $opt in
            h ) disk::wipe::usage ;;
            \? ) echo "Invalid option: -$OPTARG. Use -h for usage" >&2
            exit ;;
            : ) echo "Option -$OPTARG requires an argument" >&2
            exit ;;
        esac
    done

    shift $((OPTIND - 1))
    _devlist=$@

    # Pre-checks
    if [ ! "${_devlist}" ]; then
        util::err "No disk(s) specified"
        disk::wipe::usage
        exit 1
    fi

    for _disk in ${_devlist}; do
        if [ ! -e $_disk ]
        then
            util::err "No such device: $_disk"
            exit 1
        fi

        if [ ! $(echo $_disk | grep dev) ]; then
            echo "Enter full path to your disk"
            exit 1
        fi
    done

    util::confirm "Are you sure you want to completely wipe $_devlist?" || exit 0

    for _disk in ${_devlist}; do
        disk::wipe::target $_disk
    done
    
}


disk::partition(){
    disk::partition::usage() { 
        echo "Usage: $0 disk partition [-s <data size>] [-a <4096|512>] /dev/diskN1 [/dev/diskN2 /dev/diskN3...]" 1>&2
        echo "    -a Sector size of target. 512 or 4096. Defaults to 4096" 1>&2
        echo "    -s Specify data partition size. Use SI units: k, M, G, T. Must be integer." 1>&2
        exit 1 
    }

    while getopts ":s:h" opt
    do
        case $opt in
            s ) DATA_SIZE=$OPTARG ;;
            h ) disk::partition::usage ;;
            \? ) echo "Invalid option: -$OPTARG. Use -h for usage" >&2
            exit ;;
            : ) echo "Option -$OPTARG requires an argument" >&2
            exit ;;
        esac
    done

    shift $((OPTIND - 1))
    _devlist=$@

    # ToDo: Make check that specified size is int, not float
    # Pre-checks
    if [ ! "${_devlist}" ]; then
        util::err "No disk(s) specified"
        disk::partition::usage
        exit 1
    fi

    for _disk in ${_devlist}; do
        if [ ! -e $_disk ]; then
            echo "No such device: $_disk"
            exit 1
        fi

        if [ ! $(echo $_disk | grep dev) ]; then
            echo "Enter full path to your disk"
            exit 1
        fi

    done

    util::confirm "Are you sure you want to write partition table to $_devlist?" || exit 0

    for _disk in ${_devlist}; do
        disk::wipe::target $_disk
        printf "Partitioning $_disk"

        # Round ZFS partition size down to a multiple of 16 MiB (2^24),
        # leaving units in MiB (2^20) and leave 16 MiB at the end
        _zfs_size=$(diskinfo ${_disk} | cut -f 3)
        _zfs_size="$(( (( (_zfs_size >> 24) << 4 )) - 16 ))M"
    #    util::info "Maximum recommended data partition size: $_zfs_size" # ToDo: Move this to another another command, like "info" with some other good-to-have stuff

        gpart create -s gpt ${_disk} > /dev/null 2>&1
        printf "."
        if [ ! -z "${DATA_SIZE}" ]; then
            # Use Specific size
            _zfs_size="-s $DATA_SIZE"
            printf "."
            gpart add -a 4k -b 128 -t freebsd-zfs ${_zfs_size} ${_disk} > /dev/null 2>&1
            [ $? -eq 0 ] || util::err "Could not partition correctly."
            printf "."
        else
            # Use entire disk
            _zfs_size="-s $_zfs_size"
            gpart add -a 4k -b 128 -t freebsd-zfs ${_zfs_size} ${_disk} > /dev/null 2>&1
            [ $? -eq 0 ] || gpart show $_disk && util::err "Could not partition correctly. Please review table above"
            printf "."
        fi
        printf "done \n"
    done
    
    echo
    
    for _disk in ${_devlist}; do
        echo "New disk partition layout for $_disk:"
        gpart show $_disk
    done
}


disk::dummy_boot_code(){
    # ToDo: Multi disk support if this is ever used...
    disk::dummy_boot_code::usage() { 
        echo "Usage: $0 disk dummyboot -d </dev/diskN>" 1>&2
        exit 1 
    }

    while getopts ":d:h" opt
    do
        case $opt in
            d ) _disk=$OPTARG ;;
            h ) disk::dummy_boot_code::usage ;;
            \? ) echo "Invalid option: -$OPTARG. Use -h for usage" >&2
            exit ;;
            : ) echo "Option -$OPTARG requires an argument" >&2
            exit ;;
        esac
    done

    util::confirm "This is an completely untested feature. Continue?" || exit 0
    # Pre-checks
    if [ ! $_disk ]; then
        disk::dummy_boot_code::usage
        exit 1
    fi

    if [ ! -e $_disk ]; then
        echo "No such device: $_disk"
        exit 1
    fi

    if [ ! $(echo $_disk | grep dev) ]; then
        echo "Enter full path to your disk"
        exit 1
    fi

    # Untested
    util::confirm "Are you sure you want to install a dummy boot block so system gives meaningful message if wrongly booting from $_disk?" || exit 0
    gpart bootcode -b /boot/pmbr $_disk
}


disk::hotswap(){
    disk::hotswap::usage() { 
        # ToDo: Skip the -d option, but only allow one arg
        echo "Usage: $0 disk hotswap /dev/diskN" 1>&2
        exit 1 
    }
    
    disk::hotswap::stop() { 
        camcontrol stop ${_disk} -v
    }

    disk::hotswap::start() { 
        camcontrol start ${_disk} -v
    }

    disk::hotswap::tur() { 
        camcontrol tur ${_disk} -v
    }


    while getopts "h" opt
    do
        case $opt in
            h ) disk::hotswap::usage ;;
            \? ) echo "Invalid option: -$OPTARG. Use -h for usage" >&2
            exit ;;
            : ) echo "Option -$OPTARG requires an argument" >&2
            exit ;;
        esac
    done

    _disk=$1

    # Pre-checks
    if [ ! $_disk ]; then
        disk::hotswap::usage
        exit 1
    fi

    if [ ! -e $_disk ]; then
        echo "No such device: $_disk"
        exit 1
    fi

    if [ ! $(echo $_disk | grep dev) ]; then
        echo "Enter full path to your disk"
        exit 1
    fi

    util::confirm "Stop $_disk?" || exit 0
    echo "disk::hotswap::stop > /dev/null 2>&1"
    [ $? -eq 0 ] || util::err "Failed to stop ${_disk}"

    echo "It's now safe to carefully replace $_disk"
    util::confirm "Start $_disk?" || exit 0
    echo "disk::hotswap::start > /dev/null 2>&1"
    [ $? -eq 0 ] || util::err "Failed to start ${_disk}"

    echo "disk::hotswap::tur > /dev/null 2>&1"
    [ $? -eq 0 ] || util::err "Failed to send SCSI test unit ready ${_disk}"
}


disk::label::target(){
    local disk
    local label
    
    disk=$1
    label=$2

    # Need dev, not part
    dev=$(basename $disk | sed 's/p[0-9]//g')
    index=$(basename $disk | sed -n -e 's/^.*p//p')
    gpart modify -i "${index}" -l "${_label}" "${dev}"
}


disk::label(){
    disk::label::usage() { 
    # ToDo: Add check if "sysctl -n kern.geom.label.disk_ident.enable" is 1, then abort
        echo "Usage: $0 disk label [-s][-u][-c] /dev/diskN1pX [/dev/diskN2pX /dev/diskN3pX...]" 1>&2
        exit 1 
    }

    _i="0"

    while getopts ":usc:h" opt # Everybody needs to shower
    do
        case $opt in
            u ) _uuid="yes" && _i=$((_i+1)) ;;
            s ) _sn="yes" && _i=$((_i+1)) ;;
            c ) _custom=$OPTARG && _i=$((_i+1)) ;;
            h ) disk::label::usage ;;
            \? ) echo "Invalid option: -$OPTARG. Use -h for usage" >&2
            exit ;;
            : ) echo "Option -$OPTARG requires an argument" >&2
            exit ;;
        esac
    done

    # Pre-checks
    if [ "${_i}" -gt 1 ]; then 
        util::err "UUID, Serial Number and Custom label are mutually exclusive"
    elif [ "${_i}" -eq 0 ]; then
        util::err "Specify at least one type of label, -u(uid), -s(erial number) or -c(ustom)"
    fi

    shift $((OPTIND - 1))
    _devlist=$@

    for _disk in ${_devlist}; do
        if [ ! $_disk ]; then
            disk::label::usage
            exit 1
        fi

        if [ ! -e $_disk ]; then
            util::err "No such device: $_disk"
        fi

        if [ ! $(echo $_disk | grep dev) ]; then
            util::err "Enter full path to your disk"
        fi

        if [ ! $(echo $_disk | grep 'p[0-9]\+$') ]; then
            util::err "You must include part/partition. IE /dev/ad4p2"
        fi
    done    


    if [ -n "${_uuid}" ]; then
        util::confirm "Write UUID label to $_devlist?" || exit 0
        for _disk in ${_devlist}; do
            _disk=$(basename $_disk)
            _label=$(gpart list | grep -A 20 ${_disk} | grep rawuuid | sed -n 1p | awk '{print $2}')
            [ -z $_label ] && util::err "Failed to fetch UUID from ${_disk}"
            disk::label::target $_disk $_label
        done
    fi

    if [ -n "${_sn}" ]; then
        util::info "Consider using \"kern.geom.label.disk_ident.enable=1\""
        util::confirm "Write S/N label to $_devlist?" || exit 0
        for _disk in ${_devlist}; do
            # "diskinfo -s $_disk" might not according to man-page always return serial number:
            # -s Return the disk ident, usually the serial number
            _label=$(camcontrol identify ${_disk} | grep 'serial\ number' | cut -d" " -f 11 2>&1)
            [ $? -eq 0 ] || [ -z $_label ] && util::err "Failed to fetch serial number from ${_disk}"
            disk::label::target $_disk $_label
        done
    fi

    if [ -n "${_custom}" ]; then
        util::confirm "Write custom label \""${_custom}"\" label to $1?" || exit 0
        _label=$_custom
       disk::label::target $1 $_label
    fi
}
